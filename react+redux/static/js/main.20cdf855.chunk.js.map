{"version":3,"sources":["components/TodoList.js","actions/index.js","constants/actionTypes.js","components/TodoFilter.js","components/TodoApp.js","App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["TodoList","data","type","filter","item","isCompleted","this","props","todos","result","showResulData","className","map","key","id","isEdit","onClick","toggleTodo","readOnly","checked","onDoubleClick","editModeToggle","name","deleteTodo","style","display","value","onChange","e","editTodo","target","onBlur","React","PureComponent","connect","state","visibilityFilter","text","TodoFilter","todoCount","forEach","v","setTodoFilter","clearCompletedTodo","TodoApp","handleSubmit","event","preventDefault","newId","length","addTodo","setState","setInputChange","val","Fragment","onSubmit","placeholder","autoFocus","toggleAllTodo","htmlFor","Component","App","initState","action","todo","temp","JSON","parse","stringify","isAllCompleted","every","todoApp","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20cdf855.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { toggleTodo, deleteTodo, editModeToggle, editTodo } from '../actions';\r\n\r\nclass TodoList extends React.PureComponent {\r\n  showResulData(data, type) {\r\n    if (type === 'active') {\r\n      return data.filter(item => {\r\n        return item.isCompleted === false;\r\n      });\r\n    }\r\n    if (type === 'completed') {\r\n      return data.filter(item => {\r\n        return item.isCompleted === true;\r\n      });\r\n    }\r\n    return data;\r\n  }\r\n  render() {\r\n    // 1. 获取数据并显示到页面中\r\n    const { todos, filter } = this.props;\r\n    const result = this.showResulData(todos, filter);\r\n    return (\r\n      <ul className=\"todo-list\">\r\n        {result.map(item => (\r\n          <li\r\n            className={item.isCompleted === true ? 'completed' : ''}\r\n            key={item.id}\r\n          >\r\n            {item.isEdit === false ? (\r\n              <div className=\"view\">\r\n                <input\r\n                  // 4. 更改任务状态\r\n                  onClick={() => this.props.toggleTodo(item.id)}\r\n                  className=\"toggle\"\r\n                  type=\"checkbox\"\r\n                  readOnly\r\n                  checked={item.isCompleted ? 'checked' : ''}\r\n                />\r\n                <label onDoubleClick={() => this.props.editModeToggle(item.id)}>\r\n                  {item.name}\r\n                </label>\r\n                <button\r\n                  className=\"destroy\"\r\n                  // 3. 删除任务（单个）\r\n                  onClick={() => this.props.deleteTodo(item.id)}\r\n                ></button>\r\n              </div>\r\n            ) : (\r\n              <input\r\n                className=\"edit\"\r\n                style={{ display: 'block' }}\r\n                value={item.name}\r\n                onChange={e => this.props.editTodo(item.id, e.target.value)}\r\n                onBlur={() => this.props.editModeToggle(item.id)}\r\n              />\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nTodoList.propTypes = {\r\n  todos: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos,\r\n    filter: state.visibilityFilter\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  toggleTodo,\r\n  deleteTodo,\r\n  editModeToggle,\r\n  editTodo\r\n})(TodoList);\r\n","import * as types from '../constants/actionTypes';\r\nexport const addTodo = (id, text) => {\r\n  return {\r\n    type: types.ADD_TODO,\r\n    id,\r\n    text\r\n  };\r\n};\r\n\r\nexport const toggleTodo = id => {\r\n  return {\r\n    type: types.TOGGLE_TODO,\r\n    id\r\n  };\r\n};\r\n\r\nexport const toggleAllTodo = () => {\r\n  return {\r\n    type: types.TOGGLE_ALL_TODO\r\n  };\r\n};\r\n\r\nexport const deleteTodo = id => {\r\n  return {\r\n    type: types.DELETE_TODO,\r\n    id\r\n  };\r\n};\r\n\r\nexport const editModeToggle = id => {\r\n  return {\r\n    type: types.EDIT_MODE_TOGGLE,\r\n    id\r\n  };\r\n};\r\nexport const editTodo = (id, text) => {\r\n  return {\r\n    type: types.EDIT_TODO,\r\n    id,\r\n    text\r\n  };\r\n};\r\nexport const clearCompletedTodo = () => {\r\n  return {\r\n    type: types.CLEAR_COMPLETED_TODO\r\n  };\r\n};\r\nexport const setTodoFilter = filter => {\r\n  return {\r\n    type: types.SET_TODO_FILTER,\r\n    filter\r\n  };\r\n};\r\n","export const ADD_TODO = 'ADD_TODO';\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\r\nexport const TOGGLE_ALL_TODO = 'TOGGLE_ALL_TODO';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const EDIT_MODE_TOGGLE = 'EDIT_MODE_TOGGLE';\r\nexport const EDIT_TODO = 'EDIT_TODO';\r\nexport const CLEAR_COMPLETED_TODO = 'CLEAR_COMPLETED_TODO';\r\nexport const SET_TODO_FILTER = 'SET_TODO_FILTER';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setTodoFilter, clearCompletedTodo } from '../actions';\r\nclass TodoFilter extends React.PureComponent {\r\n  render() {\r\n    // 6. 计算未完成任务的数量\r\n    const { todos, filter: type } = this.props;\r\n    let todoCount = 0;\r\n    todos.forEach(v => {\r\n      return v.isCompleted === false ? (todoCount += 1) : '';\r\n    });\r\n\r\n    return (\r\n      <footer className=\"footer\">\r\n        <span className=\"todo-count\">\r\n          <strong>{todoCount}</strong> item left\r\n        </span>\r\n        <ul className=\"filters\">\r\n          <li>\r\n            <a\r\n              className={type === 'all' ? 'selected' : ''}\r\n              // 5. 增加筛选\r\n              onClick={() => this.props.setTodoFilter('all')}\r\n            >\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              className={type === 'active' ? 'selected' : ''}\r\n              onClick={() => this.props.setTodoFilter('active')}\r\n            >\r\n              Active\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              className={type === 'completed' ? 'selected' : ''}\r\n              onClick={() => this.props.setTodoFilter('completed')}\r\n            >\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <button\r\n          className=\"clear-completed\"\r\n          // 7. 清空已完成任务\r\n          onClick={() => this.props.clearCompletedTodo()}\r\n        >\r\n          Clear completed\r\n        </button>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos,\r\n    filter: state.visibilityFilter\r\n  };\r\n};\r\nexport default connect(mapStateToProps, { setTodoFilter, clearCompletedTodo })(\r\n  TodoFilter\r\n);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TodoList from './TodoList';\r\nimport TodoFilter from './TodoFilter';\r\nimport { addTodo, toggleAllTodo } from '../actions';\r\n\r\nclass TodoApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: ''\r\n    };\r\n  }\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { text } = this.state;\r\n    if (!text) {\r\n      return;\r\n    }\r\n    const { todos } = this.props;\r\n    const newId = todos.length > 0 ? todos[todos.length - 1].id + 1 : 1;\r\n    // 2. 添加任务\r\n    this.props.addTodo(newId, text);\r\n    this.setState({\r\n      text: ''\r\n    });\r\n  };\r\n  setInputChange = val => {\r\n    this.setState({\r\n      text: val\r\n    });\r\n  };\r\n  render() {\r\n    const { text } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <header className=\"header\">\r\n          <h1>todos</h1>\r\n          <form onSubmit={e => this.handleSubmit(e)}>\r\n            <input\r\n              className=\"new-todo\"\r\n              placeholder=\"What needs to be done?\"\r\n              autoFocus\r\n              value={text}\r\n              onChange={e => this.setInputChange(e.target.value)}\r\n            />\r\n          </form>\r\n        </header>\r\n\r\n        <section className=\"main\">\r\n          <input\r\n            id=\"toggle-all\"\r\n            className=\"toggle-all\"\r\n            type=\"checkbox\"\r\n            // 8. 批量更改任务状态\r\n            onClick={this.props.toggleAllTodo}\r\n          />\r\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n          <TodoList />\r\n        </section>\r\n        <TodoFilter />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { addTodo, toggleAllTodo })(TodoApp);\r\n","import React from 'react';\r\nimport './static/base.css';\r\nimport './static/index.css';\r\nimport TodoApp from './components/TodoApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"todoapp\">\r\n      <TodoApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  ADD_TODO,\r\n  TOGGLE_TODO,\r\n  EDIT_MODE_TOGGLE,\r\n  EDIT_TODO,\r\n  TOGGLE_ALL_TODO,\r\n  DELETE_TODO,\r\n  CLEAR_COMPLETED_TODO\r\n} from '../constants/actionTypes';\r\n\r\nconst initState = [\r\n  {\r\n    id: 1,\r\n    name: '吃饭',\r\n    isCompleted: true,\r\n    isEdit: false\r\n  },\r\n  {\r\n    id: 2,\r\n    name: '睡觉',\r\n    isCompleted: false,\r\n    isEdit: false\r\n  },\r\n  {\r\n    id: 3,\r\n    name: '打豆豆',\r\n    isCompleted: false,\r\n    isEdit: false\r\n  }\r\n];\r\nconst todos = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          name: action.text,\r\n          isCompleted: false,\r\n          isEdit: false\r\n        }\r\n      ];\r\n    case TOGGLE_TODO:\r\n      return state.map(todo =>\r\n        todo.id === action.id\r\n          ? { ...todo, isCompleted: !todo.isCompleted }\r\n          : todo\r\n      );\r\n    case EDIT_MODE_TOGGLE:\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, isEdit: !todo.isEdit } : todo\r\n      );\r\n    case EDIT_TODO:\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, name: action.text } : todo\r\n      );\r\n    case TOGGLE_ALL_TODO:\r\n      let temp = JSON.parse(JSON.stringify(state));\r\n      let isAllCompleted = temp.every(item => item.isCompleted === true);\r\n      temp.forEach(item => {\r\n        isAllCompleted ? (item.isCompleted = false) : (item.isCompleted = true);\r\n      });\r\n      return temp;\r\n    case DELETE_TODO:\r\n      return state.filter(todo => todo.id !== action.id);\r\n    case CLEAR_COMPLETED_TODO:\r\n      return state.filter(todo => !todo.isCompleted);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n","import { SET_TODO_FILTER } from '../constants/actionTypes';\r\nconst visibilityFilter = (state = 'all', action) => {\r\n  switch (action.type) {\r\n    case SET_TODO_FILTER:\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default visibilityFilter;\r\n","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\nimport visibilityFilter from './visibilityFilter';\r\n\r\nconst todoApp = combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n});\r\n\r\nexport default todoApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport todoApp from './reducers';\r\nimport './App.css';\r\n\r\nlet store = createStore(\r\n  todoApp,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}